//MANY CODES ARE GENERATED BY IDE FOR GUI FRAME
//FOR ONLY CONSOLE IDE CODE, LOOK AT LINE 840
package main;

import java.awt.Frame;
import java.io.IOException;
import java.text.ParseException;
import java.util.Date;
import java.util.Scanner;
import javax.swing.JOptionPane;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import java.text.DecimalFormat;
import java.awt.Desktop;
import java.net.URI;
import java.net.URISyntaxException;

/**
 *
 * @author amirul asri
 */
public class TestRoomRental extends javax.swing.JFrame {

    static TestRoomRental mainframe = new TestRoomRental();
    public static RoomRental[] rentalArr = new RoomRental[10];
    private int arraycustomerindex = 0;
    static DecimalFormat priceformatter = new DecimalFormat("#0.00");

    private int selectedroom = 0;
    private String roomName = null;

    /**
     * Creates new form MainFrame
     */
    public TestRoomRental() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        inputstartdategui = new com.toedter.calendar.JDateChooser();
        inputenddategui = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        objectstatusindex = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        roomselector = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        selectedroomtext = new javax.swing.JLabel();
        inputroomquantitygui = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        submitbutton = new javax.swing.JButton();
        inputnamegui = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        inputcontactnogui = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        displaytotalpaymentui = new javax.swing.JLabel();
        discountui = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        toolsmenu = new javax.swing.JMenu();
        menushowconsoledata = new javax.swing.JMenuItem();
        menuuseconsolemode = new javax.swing.JMenuItem();
        menushowallguidata = new javax.swing.JMenuItem();
        menuallcustomer = new javax.swing.JMenu();
        menucustomer1 = new javax.swing.JMenuItem();
        menucustomer2 = new javax.swing.JMenuItem();
        menucustomer3 = new javax.swing.JMenuItem();
        menucustomer4 = new javax.swing.JMenuItem();
        menucustomer5 = new javax.swing.JMenuItem();
        menucustomer6 = new javax.swing.JMenuItem();
        menucustomer7 = new javax.swing.JMenuItem();
        menucustomer8 = new javax.swing.JMenuItem();
        menucustomer9 = new javax.swing.JMenuItem();
        menucustomer10 = new javax.swing.JMenuItem();
        menuhelp = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hotel Sri Kayangan - Amirul Asri - Main Screen");
        setAutoRequestFocus(false);

        jPanel1.setBackground(new java.awt.Color(222, 255, 253));

        jPanel2.setBackground(new java.awt.Color(0, 219, 114));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 22)); // NOI18N
        jLabel3.setText("Hotel Sri Kayangan");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setText("Amirul Asri");

        jPanel4.setBackground(new java.awt.Color(153, 226, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        objectstatusindex.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        objectstatusindex.setText("Customer - 1");
        objectstatusindex.setToolTipText("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(objectstatusindex, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(119, 119, 119))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addComponent(objectstatusindex, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(9, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        jLabel1.setText("Start Date:");

        jLabel2.setText("End Date:");

        roomselector.setBackground(new java.awt.Color(255, 255, 153));
        roomselector.setText("Select Room");
        roomselector.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomselectorMouseClicked(evt);
            }
        });
        roomselector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomselectorActionPerformed(evt);
            }
        });

        jLabel5.setText("Choose your room now:");

        jLabel6.setText("Selected Room:");

        jPanel3.setBackground(new java.awt.Color(147, 255, 241));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        selectedroomtext.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        selectedroomtext.setText("No room selected");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectedroomtext, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectedroomtext, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        inputroomquantitygui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputroomquantityguiActionPerformed(evt);
            }
        });

        jLabel7.setText("Room Quantity:");

        submitbutton.setBackground(new java.awt.Color(153, 255, 232));
        submitbutton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        submitbutton.setText("SUBMIT");
        submitbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                submitbuttonMouseClicked(evt);
            }
        });

        jLabel9.setText("Full Name:");

        jLabel10.setText("Contact Number:");

        jPanel5.setBackground(new java.awt.Color(255, 255, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));

        displaytotalpaymentui.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        displaytotalpaymentui.setText("Total Payment: RM 0");

        discountui.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        discountui.setText("Discount (5%): ");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(discountui)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(displaytotalpaymentui, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(displaytotalpaymentui)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(discountui)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(roomselector, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel9)
                        .addComponent(inputnamegui)
                        .addComponent(inputcontactnogui, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE))
                    .addComponent(jLabel10)
                    .addComponent(jLabel6)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(inputstartdategui, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputenddategui, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(76, 76, 76)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7)
                            .addComponent(inputroomquantitygui, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                            .addComponent(submitbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputroomquantitygui, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputnamegui, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(inputenddategui, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                                    .addComponent(inputcontactnogui)))
                            .addComponent(submitbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputstartdategui, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(roomselector, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(86, Short.MAX_VALUE))
        );

        toolsmenu.setText("Tools");

        menushowconsoledata.setText("Show all data to console");
        menushowconsoledata.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menushowconsoledataMousePressed(evt);
            }
        });
        toolsmenu.add(menushowconsoledata);

        menuuseconsolemode.setText("Use console mode (Developer)");
        menuuseconsolemode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuuseconsolemodeMousePressed(evt);
            }
        });
        toolsmenu.add(menuuseconsolemode);

        menushowallguidata.setText("Show all stored data");
        menushowallguidata.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menushowallguidataMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menushowallguidataMousePressed(evt);
            }
        });
        toolsmenu.add(menushowallguidata);

        jMenuBar1.add(toolsmenu);

        menuallcustomer.setText("Choose data slot");

        menucustomer1.setText("Customer 1");
        menucustomer1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menucustomer1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menucustomer1MousePressed(evt);
            }
        });
        menuallcustomer.add(menucustomer1);

        menucustomer2.setText("Customer 2");
        menucustomer2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menucustomer2MousePressed(evt);
            }
        });
        menuallcustomer.add(menucustomer2);

        menucustomer3.setText("Customer 3");
        menucustomer3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menucustomer3MousePressed(evt);
            }
        });
        menuallcustomer.add(menucustomer3);

        menucustomer4.setText("Customer 4");
        menucustomer4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menucustomer4MousePressed(evt);
            }
        });
        menucustomer4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menucustomer4ActionPerformed(evt);
            }
        });
        menuallcustomer.add(menucustomer4);

        menucustomer5.setText("Customer 5");
        menucustomer5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menucustomer5MousePressed(evt);
            }
        });
        menuallcustomer.add(menucustomer5);

        menucustomer6.setText("Customer 6");
        menucustomer6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menucustomer6MousePressed(evt);
            }
        });
        menuallcustomer.add(menucustomer6);

        menucustomer7.setText("Customer 7");
        menucustomer7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menucustomer7MousePressed(evt);
            }
        });
        menucustomer7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menucustomer7ActionPerformed(evt);
            }
        });
        menuallcustomer.add(menucustomer7);

        menucustomer8.setText("Customer 8");
        menucustomer8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menucustomer8MousePressed(evt);
            }
        });
        menuallcustomer.add(menucustomer8);

        menucustomer9.setText("Customer 9");
        menucustomer9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menucustomer9MousePressed(evt);
            }
        });
        menuallcustomer.add(menucustomer9);

        menucustomer10.setText("Customer 10");
        menucustomer10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menucustomer10MousePressed(evt);
            }
        });
        menuallcustomer.add(menucustomer10);

        jMenuBar1.add(menuallcustomer);

        menuhelp.setText("Help");
        menuhelp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuhelpMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuhelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void roomselectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomselectorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomselectorActionPerformed

    private void roomselectorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomselectorMouseClicked
        RoomChooser.getFrameObject().setVisible(true);
    }//GEN-LAST:event_roomselectorMouseClicked

    private void inputroomquantityguiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputroomquantityguiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputroomquantityguiActionPerformed

    private void menuhelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuhelpMouseClicked
        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
            try {
                Desktop.getDesktop().browse(new URI("https://sites.google.com/view/hotelsrikayanganbyamirulasri/laman-utama"));
            } catch (IOException ex) {
                Logger.getLogger(TestRoomRental.class.getName()).log(Level.SEVERE, null, ex);
            } catch (URISyntaxException ex) {
                Logger.getLogger(TestRoomRental.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_menuhelpMouseClicked

    private void menucustomer4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menucustomer4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menucustomer4ActionPerformed

    private void menucustomer7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menucustomer7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menucustomer7ActionPerformed

    private void menushowallguidataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menushowallguidataMouseClicked
        AllStoredData.getFrameObject().setVisible(true);
    }//GEN-LAST:event_menushowallguidataMouseClicked

    private void menushowallguidataMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menushowallguidataMousePressed
        AllStoredData.getFrameObject().setVisible(true);
        AllStoredData.getFrameObject().showAllData();
    }//GEN-LAST:event_menushowallguidataMousePressed

    public RoomRental[] getCustomerObject() {
        return rentalArr;
    }

    private void submitbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitbuttonMouseClicked
        //ALL GUI DATA PROCESS HERE!
        boolean process = false;
        rentalArr[arraycustomerindex] = new RoomRental();
        String inputname = inputnamegui.getText();
        String contactNo = inputcontactnogui.getText();
        Date startdate = inputstartdategui.getDate();
        Date enddate = inputenddategui.getDate();
        int roomquantity = 0;

        //ERROR STATE
        boolean startdateerror = false;
        boolean enddateerror = false;
        boolean nameerror = false;
        boolean roomquantityerror = false;
        boolean roomchoosenerror = false;
        boolean contactnoerror = false;

        //CHECK NAME
        if (inputname.isEmpty()) {
            nameerror = true;
        }

        //CHECK DATE START
        if (startdate == null) {
            startdateerror = true;
        }

        //CHECK DATE END
        if (enddate == null) {
            enddateerror = true;
        }

        //CHECK ROOM QUANTITY
        try {
            roomquantity = Integer.parseInt(inputroomquantitygui.getText());
        } catch (NumberFormatException ex) {
            roomquantityerror = true;
        }

        //CHECK ROOMCHOOSER
        if (selectedroom == 0) {
            roomchoosenerror = true;
        }

        //CHECK CONTACT NO
        if (contactNo.isEmpty()) {
            contactnoerror = true;
        }

        //ERROR MESSAGE BUILDER
        if (startdateerror || enddateerror || nameerror || roomquantityerror || roomchoosenerror || contactnoerror) {
            String error = "Check your required field:";
            if (nameerror) {
                error += "\nName is empty!.";
            }
            if (contactnoerror) {
                error += "\nInvalid contact input!";
            }
            if (startdateerror) {
                error += "\nInvalid start date input!";
            }
            if (enddateerror) {
                error += "\nInvalid end date input!";
            }
            if (roomchoosenerror) {
                error += "\nNo room choosen!";
            }
            if (roomquantityerror) {
                error += "\nInvalid room quantity input!";
            }
            JOptionPane.showMessageDialog(null, error, "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            process = true;
        }

        if (process == true) {
            rentalArr[arraycustomerindex].setAllCustomerData(inputname, contactNo, roomName, startdate, enddate, roomquantity);
            double totalprice = rentalArr[arraycustomerindex].FindPrice(rentalArr[arraycustomerindex].getQuantityRoom(), rentalArr[arraycustomerindex].CalculateDays(rentalArr[arraycustomerindex].getStartDate(), rentalArr[arraycustomerindex].getEndDate()), rentalArr[arraycustomerindex].getRoomType());
            displaytotalpaymentui.setText("Total Payment: RM " + priceformatter.format(totalprice));
            discountui.setText("Discount (5%): RM -" + priceformatter.format((totalprice * 0.05)));
            submitbutton.setBackground(new java.awt.Color(153, 42, 209));
            submitbutton.setText("UPDATE");
            submitbutton.setForeground(new java.awt.Color(255, 255, 255));
            JOptionPane.showMessageDialog(null, "New Data successfully recorded for Customer " + (arraycustomerindex + 1), "Successful", JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_submitbuttonMouseClicked

    private void selectCustomerObject(int customerIndex) {
        arraycustomerindex = customerIndex;
        objectstatusindex.setText("Customer - " + (customerIndex + 1));

        //CLEAR ALL DATA INPUT GUI
        inputnamegui.setText("");
        inputcontactnogui.setText("");
        inputstartdategui.setDate(null);
        inputenddategui.setDate(null);
        inputroomquantitygui.setText("");
        selectedroom = 0;
        selectedroomtext.setText("No room selected");

        //SET BACK VALUE TO INPUT IF VALUE IN OBJECT VALUE EXISTS
        if (rentalArr[customerIndex].getCustomerName() != null) {
            inputnamegui.setText(rentalArr[customerIndex].getCustomerName());
        }
        if (rentalArr[customerIndex].getContactNo() != null) {
            inputcontactnogui.setText(rentalArr[customerIndex].getContactNo());
        }
        if (rentalArr[customerIndex].getStartDate() != null) {
            inputstartdategui.setDate(rentalArr[customerIndex].getStartDate());
        }
        if (rentalArr[customerIndex].getEndDate() != null) {
            inputenddategui.setDate(rentalArr[customerIndex].getEndDate());
        }
        if (rentalArr[customerIndex].getRoomType() != null) {
            //CHECK ROOMCHOOSER
            if (rentalArr[customerIndex].getRoomType() == "Standard") {
                selectedroom = 1;
                roomName = "Standard";
                selectedroomtext.setText("Room Standard SELECTED");
            } else if (rentalArr[customerIndex].getRoomType() == "Deluxe") {
                selectedroom = 2;
                roomName = "Deluxe";
                selectedroomtext.setText("Room Deluxe SELECTED");
            } else if (rentalArr[customerIndex].getRoomType() == "Superior") {
                selectedroom = 3;
                roomName = "Superior";
                selectedroomtext.setText("Room Superior SELECTED");
            }
        }
        if (rentalArr[customerIndex].getQuantityRoom() != 0) {
            String quantityroomtoString = String.valueOf(rentalArr[customerIndex].getQuantityRoom());
            inputroomquantitygui.setText(quantityroomtoString);
        }

        try {
            double totalprice = rentalArr[customerIndex].FindPrice(rentalArr[customerIndex].getQuantityRoom(), rentalArr[customerIndex].CalculateDays(rentalArr[customerIndex].getStartDate(), rentalArr[customerIndex].getEndDate()), rentalArr[customerIndex].getRoomType());
            displaytotalpaymentui.setText("Total Payment: RM " + priceformatter.format(totalprice));
            discountui.setText("Discount (5%): RM -" + priceformatter.format((totalprice * 0.05)));
            submitbutton.setBackground(new java.awt.Color(153, 42, 209));
            submitbutton.setText("UPDATE");
            submitbutton.setForeground(new java.awt.Color(255, 255, 255));
        } catch (Exception e) {
            displaytotalpaymentui.setText("Total Payment: RM 0");
            discountui.setText("Discount (5%): ");
            submitbutton.setText("SUBMIT");
            submitbutton.setBackground(new java.awt.Color(153, 255, 232));
            submitbutton.setForeground(new java.awt.Color(0, 0, 0));
        }

        JOptionPane.showMessageDialog(null, "Object Customer " + (arraycustomerindex + 1) + " Selected", "Select slot", JOptionPane.INFORMATION_MESSAGE);
    }

    private void menucustomer1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menucustomer1MouseClicked
    }//GEN-LAST:event_menucustomer1MouseClicked

    private void menucustomer1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menucustomer1MousePressed
        //SET OBJECT 1 CUSTOMER
        selectCustomerObject(0);
    }//GEN-LAST:event_menucustomer1MousePressed

    private void menucustomer2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menucustomer2MousePressed
        //SET OBJECT 2 CUSTOMER
        selectCustomerObject(1);
    }//GEN-LAST:event_menucustomer2MousePressed

    private void menucustomer3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menucustomer3MousePressed
        //SET OBJECT 3 CUSTOMER
        selectCustomerObject(2);
    }//GEN-LAST:event_menucustomer3MousePressed

    private void menucustomer4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menucustomer4MousePressed
        //SET OBJECT 4 CUSTOMER
        selectCustomerObject(3);
    }//GEN-LAST:event_menucustomer4MousePressed

    private void menucustomer5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menucustomer5MousePressed
        //SET OBJECT 5 CUSTOMER
        selectCustomerObject(4);
    }//GEN-LAST:event_menucustomer5MousePressed

    private void menucustomer6MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menucustomer6MousePressed
        //SET OBJECT 6 CUSTOMER
        selectCustomerObject(5);
    }//GEN-LAST:event_menucustomer6MousePressed

    private void menucustomer7MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menucustomer7MousePressed
        //SET OBJECT 7 CUSTOMER
        selectCustomerObject(6);
    }//GEN-LAST:event_menucustomer7MousePressed

    private void menucustomer8MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menucustomer8MousePressed
        //SET OBJECT 8 CUSTOMER
        selectCustomerObject(7);
    }//GEN-LAST:event_menucustomer8MousePressed

    private void menucustomer9MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menucustomer9MousePressed
        //SET OBJECT 9 CUSTOMER
        selectCustomerObject(8);
    }//GEN-LAST:event_menucustomer9MousePressed

    private void menucustomer10MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menucustomer10MousePressed
        //SET OBJECT 10 CUSTOMER
        selectCustomerObject(9);
    }//GEN-LAST:event_menucustomer10MousePressed

    private void menushowconsoledataMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menushowconsoledataMousePressed
        //SHOW ALL DATA TO CONSOLE
        for (int i = 0; i < rentalArr.length; i++) {
            System.out.println("|Customer " + (i + 1) + "|");
            try {
                System.out.println(rentalArr[i].toString());
                System.out.println("Days: " + rentalArr[i].CalculateDays(rentalArr[i].getStartDate(), rentalArr[i].getEndDate()));
                //DISPLAY FOR DISCOUNT IF MORE THAN TWO DAYS
                displaydiscount(i);
                System.out.println("Total price: RM " + priceformatter.format(rentalArr[i].FindPrice(rentalArr[i].getQuantityRoom(), rentalArr[i].CalculateDays(rentalArr[i].getStartDate(), rentalArr[i].getEndDate()), rentalArr[i].getRoomType())) + "\n");
            } catch (Exception e) {
                System.out.println("No Data\n");
            }
        }
        //CALCULATE HOW MANY ROOM ARE BOOKED BY CUSTOMER
        int countstandard = 0;
        int countdeluxe = 0;
        int countsuperior = 0;

        try {
            //COUNT BY USING FOR LOOP
            for (int i = 0; i < rentalArr.length; i++) {
                if (rentalArr[i].getRoomType().equalsIgnoreCase("Standard")) {
                    countstandard = countstandard + rentalArr[i].getQuantityRoom();
                } else if (rentalArr[i].getRoomType().equalsIgnoreCase("Deluxe")) {
                    countdeluxe = countdeluxe + rentalArr[i].getQuantityRoom();
                } else if (rentalArr[i].getRoomType().equalsIgnoreCase("Superior")) {
                    countsuperior = countsuperior + rentalArr[i].getQuantityRoom();
                }
            }
        } catch (Exception e) {
            //NO LOG
        }

        //DISPLAY ALL BOOKED ROOM NUMBER
        System.out.println("***Number of Room Rental for each type***");
        System.out.println("Standard: " + countstandard);
        System.out.println("Deluxe: " + countdeluxe);
        System.out.println("Superior: " + countsuperior);
        System.out.println(); //SPACER FOR NEXT OUTPUT
    }//GEN-LAST:event_menushowconsoledataMousePressed

    private void menuuseconsolemodeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuuseconsolemodeMousePressed
        try {
            consoleMode();
        } catch (ParseException ex) {
            Logger.getLogger(TestRoomRental.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuuseconsolemodeMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //CREATE ALL ARRAY OBJECT (FOR GUI AND CONSOLE)
        for (int i = 0; i < rentalArr.length; i++) {
            rentalArr[i] = new RoomRental();
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                mainframe.setVisible(true);
                try {
                    mainframe.setIconImage(ImageIO.read(getClass().getResource("icon.png")));
                } catch (IOException ex) {
                    Logger.getLogger(TestRoomRental.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public static TestRoomRental getFrameObject() {
        return mainframe;
    }

    public void setroomselected(int roomNumber) {
        //SET TEXT FOR ROOM SELECTED AND ROOM SELECTED VALUE
        selectedroom = roomNumber;
        //CHECK ROOMCHOOSER
        if (selectedroom == 1) {
            roomName = "Standard";
        } else if (selectedroom == 2) {
            roomName = "Deluxe";
        } else if (selectedroom == 3) {
            roomName = "Superior";
        }
        selectedroomtext.setText("Room " + roomName + " SELECTED");
    }

    public static void displaydiscount(int index) {
        //DISPLAY FOR DISCOUNT IF MORE THAN TWO DAYS
        if (rentalArr[index].CalculateDays(rentalArr[index].getStartDate(), rentalArr[index].getEndDate()) > 2) {
            System.out.println("Discount (More than 2 days): RM -" + priceformatter.format(rentalArr[index].FindPrice(rentalArr[index].getQuantityRoom(), rentalArr[index].CalculateDays(rentalArr[index].getStartDate(), rentalArr[index].getEndDate()), rentalArr[index].getRoomType()) * 0.05));
        } else {
            System.out.println("Discount: No discount");
        }
    }

    public static void displaydaysandprice(int index) {
        System.out.println("Days: " + rentalArr[index].CalculateDays(rentalArr[index].getStartDate(), rentalArr[index].getEndDate()));
        System.out.println("Total price: RM " + priceformatter.format(rentalArr[index].FindPrice(rentalArr[index].getQuantityRoom(), rentalArr[index].CalculateDays(rentalArr[index].getStartDate(), rentalArr[index].getEndDate()), rentalArr[index].getRoomType())));
    }

    public static void consoleMode() throws ParseException {
        Scanner userinput = new Scanner(System.in);
        String customerName;
        String contactNo;
        String roomType;
        String startDateInput;
        String endDateInput;
        int quantityRoom;

        Date dateStart;
        Date dateEnd;

        int consolemodeprompt = JOptionPane.showConfirmDialog(null, "This will use your IDE console window for Customer storing data. \nNOTED: all previous customer data will be replace by new input in console mode. Do you want to continue?", "Console mode", JOptionPane.YES_NO_OPTION);

        if (consolemodeprompt == JOptionPane.YES_OPTION) {
            mainframe.setVisible(false);
            //INTRO
            System.out.println("*********************");
            System.out.println(" Hotel Sri Kayangan");
            System.out.println("*********************");

            //PROMPT TO CONTINUE TO USE CONSOLE MODE
            System.out.print("Console mode enabled. Continue? (y/N): ");
            String exitconsole = userinput.nextLine();
            if (exitconsole.equalsIgnoreCase("y")) {
                System.out.println("Continue to console\n");

                //USER INPUT
                for (int i = 0; i < 2; i++) {
                    System.out.println("---Customer " + (i + 1) + "---");
                    System.out.print("Customer name: ");
                    customerName = userinput.nextLine();
                    System.out.print("Contact number: ");
                    contactNo = userinput.nextLine();
                    System.out.print("Enter your room type (Standard, Deluxe, Superior): ");
                    roomType = userinput.next();
                    userinput.nextLine(); // FIX INPUT SKIPPING BUG
                    System.out.print("Enter check in Date (dd/mm/yyyy): ");
                    startDateInput = userinput.nextLine();
                    System.out.print("Enter check out Date (dd/mm/yyyy): ");
                    endDateInput = userinput.nextLine();
                    System.out.print("Enter room quantity: ");
                    quantityRoom = userinput.nextInt();
                    userinput.nextLine(); // FIX INPUT SKIPPING BUG

                    //CONVERT STRING TO DATE
                    dateStart = new SimpleDateFormat("dd/MM/yyyy").parse(startDateInput);
                    dateEnd = new SimpleDateFormat("dd/MM/yyyy").parse(endDateInput);

                    //SET VALUE BY USING MUTATOR
                    rentalArr[i].setAllCustomerData(customerName, contactNo, roomType, dateStart, dateEnd, quantityRoom);
                    System.out.print("\n");
                }

                //DISPLAY ALL STORED DATA INTO OBJECTS
                System.out.println("-- All stored customer data displayed here --");
                for (int i = 0; i < 2; i++) {
                    System.out.println("|Customer " + (i + 1) + "|");
                    System.out.println(rentalArr[i].toString());
                    System.out.println("Days: " + rentalArr[i].CalculateDays(rentalArr[i].getStartDate(), rentalArr[i].getEndDate()));
                    //DISPLAY FOR DISCOUNT IF MORE THAN TWO DAYS
                    displaydiscount(i);
                    System.out.println("Total price: RM " + priceformatter.format(rentalArr[i].FindPrice(rentalArr[i].getQuantityRoom(), rentalArr[i].CalculateDays(rentalArr[i].getStartDate(), rentalArr[i].getEndDate()), rentalArr[i].getRoomType())) + "\n");
                }

                //CALCULATE HOW MANY ROOM ARE BOOKED BY CUSTOMER
                int countstandard = 0;
                int countdeluxe = 0;
                int countsuperior = 0;

                //COUNT BY USING FOR LOOP
                for (int i = 0; i < rentalArr.length; i++) {
                    if (rentalArr[i].getRoomType().equalsIgnoreCase("Standard")) {
                        countstandard = countstandard + rentalArr[i].getQuantityRoom();
                    } else if (rentalArr[i].getRoomType().equalsIgnoreCase("Deluxe")) {
                        countdeluxe = countdeluxe + rentalArr[i].getQuantityRoom();
                    } else if (rentalArr[i].getRoomType().equalsIgnoreCase("Superior")) {
                        countsuperior = countsuperior + rentalArr[i].getQuantityRoom();
                    }
                }

                //DISPLAY ALL BOOKED ROOM NUMBER
                System.out.println("***Number of Room Rental for each type***");
                System.out.println("Standard: " + countstandard);
                System.out.println("Deluxe: " + countdeluxe);
                System.out.println("Superior: " + countsuperior);
                System.out.println(); //SPACER FOR NEXT OUTPUT

                //PROMPT USER FOR ENTER EDITING MODE
                System.out.print("Want to edit any customer data? (y/N): ");
                String promptedit = userinput.nextLine();

                //FIND CUSTOMER NAME AND SET THE NEW DATA
                boolean continuous = true;
                if (promptedit.equalsIgnoreCase("y")) {
                    while (continuous) {
                        System.out.println("Below are the list of all customers: ");
                        for (int i = 0; i < 2; i++) {
                            System.out.println((i + 1) + ". " + rentalArr[i].getCustomerName());
                        }
                        System.out.print("\nChoose customer by numbers (1 - 10): ");
                        int selectcustnumber = Integer.parseInt(userinput.nextLine());
                        if ((selectcustnumber >= 1) && (selectcustnumber <= 10)) {
                            selectcustnumber = selectcustnumber - 1;
                            System.out.println("--Editing customer " + (selectcustnumber + 1) + "--");
                            System.out.println("\nChoose data to edit: \n1. Customer name \n2. Customer contact number \n3. Room type \n4. Check in date \n5. Check out date \n6. Room quantity");
                            System.out.print("Enter number: ");
                            int selectcustdatanumber = Integer.parseInt(userinput.nextLine());
                            if (selectcustdatanumber == 1) {
                                System.out.print("Enter new customer name: ");
                                customerName = userinput.nextLine();
                                rentalArr[selectcustnumber].setCustomerName(customerName);
                                System.out.println("\nUpdated data for Customer " + (selectcustnumber + 1) + ": ");
                                System.out.println(rentalArr[selectcustnumber].toString());
                                displaydaysandprice(selectcustnumber);
                                displaydiscount(selectcustnumber);
                            } else if (selectcustdatanumber == 2) {
                                System.out.print("Enter new contact number: ");
                                contactNo = userinput.nextLine();
                                rentalArr[selectcustnumber].setContactNo(contactNo);
                                System.out.println("\nUpdated data for Customer " + (selectcustnumber + 1) + ": ");
                                System.out.println(rentalArr[selectcustnumber].toString());
                                displaydaysandprice(selectcustnumber);
                                displaydiscount(selectcustnumber);
                            } else if (selectcustdatanumber == 3) {
                                System.out.print("Enter new room type (Standard, Deluxe, Superior): ");
                                roomType = userinput.nextLine();
                                rentalArr[selectcustnumber].setRoomType(roomType);
                                System.out.println("\nUpdated data for Customer " + (selectcustnumber + 1) + ": ");
                                System.out.println(rentalArr[selectcustnumber].toString());
                                displaydaysandprice(selectcustnumber);
                                displaydiscount(selectcustnumber);
                            } else if (selectcustdatanumber == 4) {
                                System.out.print("Enter new check in Date (dd/mm/yyyy): ");
                                startDateInput = userinput.nextLine();
                                dateStart = new SimpleDateFormat("dd/MM/yyyy").parse(startDateInput);
                                rentalArr[selectcustnumber].setStartDate(dateStart);
                                System.out.println("\nUpdated data for Customer " + (selectcustnumber + 1) + ": ");
                                System.out.println(rentalArr[selectcustnumber].toString());
                                displaydaysandprice(selectcustnumber);
                                displaydiscount(selectcustnumber);
                            } else if (selectcustdatanumber == 5) {
                                System.out.print("Enter new check out Date (dd/mm/yyyy): ");
                                endDateInput = userinput.nextLine();
                                dateEnd = new SimpleDateFormat("dd/MM/yyyy").parse(endDateInput);
                                rentalArr[selectcustnumber].setEndDate(dateEnd);
                                System.out.println("\nUpdated data for Customer " + (selectcustnumber + 1) + ": ");
                                System.out.println(rentalArr[selectcustnumber].toString());
                                displaydaysandprice(selectcustnumber);
                                displaydiscount(selectcustnumber);
                            } else if (selectcustdatanumber == 6) {
                                System.out.print("Enter new room quantity: ");
                                quantityRoom = Integer.parseInt(userinput.nextLine());
                                rentalArr[selectcustnumber].setQuantityRoom(quantityRoom);
                                System.out.println("\nUpdated data for Customer " + (selectcustnumber + 1) + ": ");
                                System.out.println(rentalArr[selectcustnumber].toString());
                                displaydaysandprice(selectcustnumber);
                                displaydiscount(selectcustnumber);
                            } else {
                                System.out.println("INVALID CUSTOMER DATA NUMBER! TRY AGAIN");
                            }
                        } else {
                            System.out.println("INVALID CUSTOMER NUMBER! TRY AGAIN");
                        }
                        System.out.print("\nContinue to edit another customer data? (y/N): ");
                        String prompteditagain = userinput.nextLine();
                        if (prompteditagain.equalsIgnoreCase("y")) {
                            System.out.println("-Continue editing mode-");
                        } else {
                            continuous = false;
                            System.out.println("-Exit editing mode-");
                        }
                    }
                }
                System.out.println("Back to GUI");
                mainframe.setVisible(true);
                mainframe.toFront();
                mainframe.setState(Frame.NORMAL);
            } else {
                System.out.println("Back to GUI");
                mainframe.setVisible(true);
                mainframe.toFront();
                mainframe.setState(Frame.NORMAL);
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel discountui;
    private javax.swing.JLabel displaytotalpaymentui;
    private javax.swing.JTextField inputcontactnogui;
    private com.toedter.calendar.JDateChooser inputenddategui;
    private javax.swing.JTextField inputnamegui;
    private javax.swing.JTextField inputroomquantitygui;
    private com.toedter.calendar.JDateChooser inputstartdategui;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JMenu menuallcustomer;
    private javax.swing.JMenuItem menucustomer1;
    private javax.swing.JMenuItem menucustomer10;
    private javax.swing.JMenuItem menucustomer2;
    private javax.swing.JMenuItem menucustomer3;
    private javax.swing.JMenuItem menucustomer4;
    private javax.swing.JMenuItem menucustomer5;
    private javax.swing.JMenuItem menucustomer6;
    private javax.swing.JMenuItem menucustomer7;
    private javax.swing.JMenuItem menucustomer8;
    private javax.swing.JMenuItem menucustomer9;
    private javax.swing.JMenu menuhelp;
    private javax.swing.JMenuItem menushowallguidata;
    private javax.swing.JMenuItem menushowconsoledata;
    private javax.swing.JMenuItem menuuseconsolemode;
    private javax.swing.JLabel objectstatusindex;
    private javax.swing.JButton roomselector;
    private javax.swing.JLabel selectedroomtext;
    private javax.swing.JButton submitbutton;
    private javax.swing.JMenu toolsmenu;
    // End of variables declaration//GEN-END:variables
}